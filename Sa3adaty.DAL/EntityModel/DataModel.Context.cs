//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sa3adaty.DAL.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    
    public partial class Sa3adatyEntities : DbContext
    {
        public Sa3adatyEntities()
            : base("name=Sa3adatyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Article> Articles { get; set; }
        public DbSet<ArticleCategory> ArticleCategories { get; set; }
        public DbSet<ArticleImage> ArticleImages { get; set; }
        public DbSet<CategoryImage> CategoryImages { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<DailyQuote> DailyQuotes { get; set; }
        public DbSet<EmailCampagin> EmailCampagins { get; set; }
        public DbSet<Like> Likes { get; set; }
        public DbSet<UserImage> UserImages { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Subscription> Subscriptions { get; set; }
        public DbSet<AdvertiseInfo> AdvertiseInfoes { get; set; }
        public DbSet<ContactInfo> ContactInfoes { get; set; }
        public DbSet<StaticPage> StaticPages { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Log> Logs { get; set; }
        public DbSet<Image> Images { get; set; }
        public DbSet<AuthorImage> AuthorImages { get; set; }
        public DbSet<Campaign> Campaigns { get; set; }
        public DbSet<Tip> Tips { get; set; }
        public DbSet<ArticleTag> ArticleTags { get; set; }
        public DbSet<PollAnswer> PollAnswers { get; set; }
        public DbSet<PollUserAnswer> PollUserAnswers { get; set; }
        public DbSet<Tag> Tags { get; set; }
        public DbSet<Poll> Polls { get; set; }
        public DbSet<VideoTag> VideoTags { get; set; }
        public DbSet<TagOfVideo> TagOfVideos { get; set; }
        public DbSet<VideoImage> VideoImages { get; set; }
        public DbSet<Video> Videos { get; set; }
        public DbSet<VideoCategory> VideoCategories { get; set; }
        public DbSet<VideoComment> VideoComments { get; set; }
        public DbSet<UserProfile> UserProfiles { get; set; }
        public DbSet<Author> Authors { get; set; }
    
        public virtual ObjectResult<SearchArticles_Result> SearchArticles(string query, Nullable<int> page, Nullable<int> page_size, string except)
        {
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var page_sizeParameter = page_size.HasValue ?
                new ObjectParameter("page_size", page_size) :
                new ObjectParameter("page_size", typeof(int));
    
            var exceptParameter = except != null ?
                new ObjectParameter("except", except) :
                new ObjectParameter("except", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchArticles_Result>("SearchArticles", queryParameter, pageParameter, page_sizeParameter, exceptParameter);
        }
    }
}
